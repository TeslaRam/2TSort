/**
 * @file comp_compare.cpp
 * @author Generated by Github Copilot
 * @author TeslaRam https://github.com/TeslaRam
 * @brief Comparation of 2TSort and other sorting algorithms
 * @date 10.7.25
 * @see https://github.com/TeslaRam/2TSort
 */

#include "comp_compare.h"

int main(int argc, char* argv[]) {
   srand(time(nullptr));  // to have random numbers

   // sort algorithms that will be compared
   vector<SortAlgoData> sortsData = {
       {"2TSort", _2TSort, AlgoTimes()},
       {"QuickSort", quickSort, AlgoTimes()},
       {"BubbleSort", bubbleSort, AlgoTimes()},
       {"InsertionSort", insertionSort, AlgoTimes()},
       {"SelectionSort", selectionSort, AlgoTimes()},
   };

   // types of order of generated numbers
   SortType cases[] = {
       {generateRandom, &AlgoTimes::random_numbers},
       {generateOrdered, &AlgoTimes::ordered},
       {generateReversed, &AlgoTimes::reversed}};

   for (SortType& c : cases) {
      for (SortAlgoData& sortAlg : sortsData) {
         vector<int> toSort;
         setSortSize(argc, argv, toSort);
         c.generator(toSort);

         auto start = chrono::high_resolution_clock::now();
         sortAlg.exec(toSort);
         auto end = chrono::high_resolution_clock::now();

         sortAlg.times.*(c.duration) = end - start;
      }
   }

   printReults(sortsData);

   return 0;
}

void printReults(vector<SortAlgoData> sortsData) {
   cout
       << endl
       << "+------------------------------------------------+"
       << endl
       << "| "
       << left << setw(13) << "Algorithm"
       << " | " << right << setw(8) << "Random"
       << " | " << right << setw(8) << "Ordered"
       << " | " << right << setw(8) << "Reversed"
       << " |"
       << " (ms)"
       << endl
       << "+------------------------------------------------+"
       << endl;

   for (const auto& sortAlg : sortsData) {
      cout
          << "| "
          << left << setw(13) << sortAlg.name
          << " | " << right << setw(8) << sortAlg.times.random_numbers.count()
          << " | " << right << setw(8) << sortAlg.times.ordered.count()
          << " | " << right << setw(8) << sortAlg.times.reversed.count()
          << " |"
          << endl;
   }

   cout
       << "+------------------------------------------------+"
       << endl
       << endl;
}