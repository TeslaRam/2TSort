/**
 * @file comp_compare.cpp
 * @author Generated by Github Copilot
 * @author TeslaRam https://github.com/TeslaRam
 * @brief Comparation of 2TSort and other sorting algorithms
 * @date 10.7.25
 * @see https://github.com/TeslaRam/2TSort
 */

#include "comp_compare.h"

int main(int argc, char* argv[]) {
   srand(time(nullptr));  // to have random numbers

   vector<int> toSort;  // where to store numbers to sort

   // sort algorithms that will be compared
   vector<SortAlgoData> sorts = {
       {"2TSort", _2TSort, AlgoTimes()},
       {"QuickSort", quickSort, AlgoTimes()},
       {"BubbleSort", bubbleSort, AlgoTimes()},
       {"InsertionSort", insertionSort, AlgoTimes()},
       {"SelectionSort", selectionSort, AlgoTimes()},
   };

   // types of order of generated numbers
   SortType cases[] = {
       {generateRandom, &AlgoTimes::random_numbers},
       {generateOrdered, &AlgoTimes::ordered},
       {generateReversed, &AlgoTimes::reversed}};

   for (SortType& c : cases) {
      for (SortAlgoData& sortAlg : sorts) {
         setSortSize(argc, argv, toSort);
         c.generator(toSort);

         auto start = chrono::high_resolution_clock::now();
         sortAlg.exec(toSort);
         auto end = chrono::high_resolution_clock::now();

         sortAlg.times.*(c.duration) = end - start;
      }
   }

   cout << "Algorithm         | Random | Ordered | Reversed" << endl;
   cout << "-------------------------------------------------------------" << endl;
   for (const auto& sortAlg : sorts) {
      cout << sortAlg.name
           << " | " << sortAlg.times.random_numbers.count()
           << " | " << sortAlg.times.ordered.count()
           << " | " << sortAlg.times.reversed.count()
           << endl;
   }

   cout << "\tAll times are in ms" << endl;

   return 0;
}
