/**
 * @file comp_sorts.cpp
 * @author Generated by Github Copilot
 * @author TeslaRam https://github.com/TeslaRam
 * @brief Implementation of sorting algorithms for comparison
 * @date 11.7.25
 * @see https://github.com/TeslaRam/2TSort
 */

#include "comp_sorts.h"

void _2TSort(vector<int>& toSort) {
   size_t lastChange = toSort.size();

   while (true) {
      size_t toSetLastChange = 0;
      bool changed = false;

      for (size_t i = 0; i < lastChange; i++) {
         if (toSort[i] > toSort[i + 1]) {
            int focusedElement = toSort[i + 1];

            for (int j = i + 1; j > 0; j--)
               toSort[j] = toSort[j - 1];

            toSort[0] = focusedElement;
            toSetLastChange = i;
            changed = true;
         }
      }

      if (!changed) break;
      lastChange = toSetLastChange;
   }
}

void bubbleSort(vector<int>& toSort) {
   for (size_t i = 0; i < toSort.size(); i++) {
      for (size_t j = 0; j < toSort.size() - i - 1; j++) {
         if (toSort[j] > toSort[j + 1]) {
            swap(toSort[j], toSort[j + 1]);
         }
      }
   }
}

void insertionSort(vector<int>& toSort) {
   for (size_t i = 1; i < toSort.size(); i++) {
      int key = toSort[i];
      int j = i - 1;
      while (j >= 0 && toSort[j] > key) {
         toSort[j + 1] = toSort[j];
         j--;
      }
      toSort[j + 1] = key;
   }
}

void selectionSort(vector<int>& toSort) {
   for (size_t i = 0; i < toSort.size(); i++) {
      size_t minIdx = i;
      for (size_t j = i + 1; j < toSort.size(); j++) {
         if (toSort[j] < toSort[minIdx]) {
            minIdx = j;
         }
      }
      swap(toSort[i], toSort[minIdx]);
   }
}

/** Quick Sort helper */
static void quickSortHelper(vector<int>& arr, int left, int right) {
   if (left >= right) return;
   int pivot = arr[right];
   int i = left - 1;
   for (int j = left; j < right; ++j) {
      if (arr[j] < pivot) {
         ++i;
         swap(arr[i], arr[j]);
      }
   }
   swap(arr[i + 1], arr[right]);
   int pi = i + 1;
   quickSortHelper(arr, left, pi - 1);
   quickSortHelper(arr, pi + 1, right);
}

void quickSort(vector<int>& toSort) {
   quickSortHelper(toSort, 0, toSort.size() - 1);
}